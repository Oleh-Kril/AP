openapi: 3.0.3
info:
  title: Cinema REST API
  description: |-
    This is a REST API for cinema service site.
    
    - Repository: https://github.com/Oleh-Kril/AP
  version: 1.0.0
servers:
    - url: 127.0.0.1:5000
paths:
  /movie:
    post:
      tags:
        - movie
      summary: Add movie to the catalogue
      description: Add movie to the catalogue
      operationId: addMovie
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
          application/xml:
            schema:
              $ref: '#/components/schemas/Movie'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Movie'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid data
        '404':
          description: Movie not found
        '405':
          description: Validation exception
        "default":
          description: Send general error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - cinema_auth:
            - write:movies
            - read:movies
    put:
      tags:
        - movie
      summary: Update information about movie
      description: Enter movie information to update
      operationId: updateMovie
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
          application/xml:
            schema:
              $ref: '#/components/schemas/Movie'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Movie'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
            application/xml:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid data
        '404':
          description: Movie not found
        '405':
          description: Validation exception
        "default":
          description: Send general error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - cinema_auth:
            - write:movies
            - read:movies
  /movies:
    get:
      summary: Show all movies
      tags:
        - movies
      operationId: showAllMovies
      parameters:
        - name: title
          in: query
          description: title of movie to return
          required: false
          schema:
            type: string

        - name: genre
          in: query
          description: find all with genre
          required: false
          schema:
            $ref: "#/components/schemas/Genre"

        - name: country
          in: query
          description: find all created in country X
          required: false
          schema:
            $ref: "#/components/schemas/Country"

        - name: director
          in: query
          description: find all created by director X
          required: false
          schema:
            $ref: "#/components/schemas/Director"
      responses:
        '200':
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movies"
        '404':
          description: Movies not found
        '400':
          description: Invalid parameter
        "default":
          description: Send general error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - cinema_auth:
            - write:movies
            - read:movies

  /movie/{id}:
    get:
      tags:
        - movie
      summary: Find movie by ID
      description: Returns a movie with specified ID
      operationId: getMovieById
      parameters:
        - name: id
          in: path
          description: ID of movie to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
            application/xml:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid ID
        '404':
          description: Movie not found
        "default":
          description: Send general error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - cinema_auth:
            - write:movies
            - read:movies
    delete:
      tags:
        - movie
      summary: Deletes a movie
      description: ''
      operationId: deleteMovie
      parameters:
        - name: id
          in: path
          description: ID of movie to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID value
        "default":
          description: Send general error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - cinema_auth:
            - write:movies
            - read:movies

  /scheduledMovies:
    get:
      summary: Show all movies in schedule
      tags:
        - scheduledMovies
      operationId: showAllScheduledMovies
      parameters:
        - name: when
          in: query
          description: show list of movies untill date
          required: true
          schema:
            type: string
            enum:
              - today
              - tomorrow
              - week
              - month

        - name: type
          in: query
          description: find all with type (3d, 2d..)
          required: false
          schema:
            type: string
            enum:
              - 2D
              - 3D
              - 4D

      responses:
        '200':
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movies"
        '404':
          description: Error
        '400':
          description: Invalid parameter
        "default":
          description: Send general error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin:
    get:
      tags:
        - admin
      summary: "Logs admin"
      operationId: adminLogIn
      parameters:
        - name: "username"
          in: "query"
          description: "The username to login"
          required: true
          schema:
            type: "string"
        - name: password
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username or password
        '404':
          description: Admin account not found
        "default":
          description: Send general error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: ''
      operationId: createUser
      requestBody:
        description: Creates user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the account
      description: ''
      operationId: userLogIn
      parameters:
        - name: username
          in: query
          description: The username for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username or password
        '404':
          description: User not found
        "default":
          description: Send general error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out currently logged user
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    put:
      tags:
        - user
      summary: Change username
      description: This can only be done by the logged in user
      operationId: userChangeUsername
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Updating username
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        "default":
          description: Send general error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: 500
        message:
          type: string
          example: Unhandled error

    Ticket:
      type: object
      required:
        - id
        - rowN
        - seatN
        - user_id
      properties:
        id:
          type: integer
          example: 1
        rowN:
          type: integer
          example: 5
        seatN:
          type: integer
          example: 12
        user_id:
          type: integer
          example: 1
    Genre:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: action
      xml:
        name: genre
    Director:
      type: object
      properties:
        id:
          type: integer
          example: 1
        full_name:
          type: string
          example: Eugene Makarenko
      xml:
        name: director
    Movie:
      required:
        - title
        - posterUrl
        - description
        - country
      type: object
      properties:
        id:
          type: integer
          example: 10
        title:
          type: string
          example: "Lost Island"
        createdYear:
          type: integer
          example: 2022
        long:
          type: integer
          example: 89
        ageRestriction:
          type: integer
          example: 18
        genre:
          type: array
          items:
            $ref: '#/components/schemas/Genre'

        posterUrl:
          type: string
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: posterUrl
        trailerUrl:
          type: string
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: trailerUrl
        direcor:
          type: array
          items:
            $ref: '#/components/schemas/Director'
        description:
          type: string
          example: This movie is about
        country:
          $ref: '#/components/schemas/Country'

    Movies:
      type: array
      items:
        $ref: "#/components/schemas/Movie"
    Country:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Ukraine
    Language:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Ukrainian

    ScheduledMovies:
      type: object
      required:
        - id
        - datetime
        - movie_id
        - price
        - hall
        - type
        - language_id
      properties:
        id:
          type: integer
          example: 1
        datetime:
          type: string
          example: 21\03\2004 22:05
        movide_id:
          type: integer
          example: 2
        price:
          type: integer
          example: 120
        hall:
          type: string
          example: 2B
        type:
          type: string
          enum:
            - 2D
            - 3D
            - 4D
        language_id:
          type: integer
          example: 1
    Admin:
      type: object
      required:
        - name
        - surname
        - username
        - token
      properties:
        name:
          type: string
          example: Glek
        surname:
          type: string
          example: Glekiv
        username:
          type: string
          example: bebebeu
        token:
          type: string
          example: '12345678'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        name:
          type: string
          example: Glek
        surname:
          type: string
          example: Glekiv
        email:
          type: string
          example: glekglekiv@gmail.com
        token:
          type: string
          example: '4a8a9fc31dc15a4b87bb145b05db3ae0bf2333e4'
        phone:
          type: string
          example: '+380980000000'
      xml:
        name: user
  securitySchemes:
    cinema_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://cinema.swagger.io/oauth/authorize
          scopes:
            write:movies: change movies
            read:movies: read movies